extern crate rusqlcipher;
extern crate vcx;

use std::path::Path;
use std::path::PathBuf;
use self::rusqlcipher::Connection;
use self::rusqlcipher::types::ToSql;
use std::env::home_dir;
use self::vcx::utils::libindy::wallet;

fn _wallet_default_file() -> Result<PathBuf, String> {
    wallet_file("wallet1", None)
}

pub fn wallet_file(wallet_name: &str, pool_name: Option<&str>) -> Result<PathBuf, String> {
    let rtn = wallet_file_path(wallet_name)?;
    if !rtn.exists() {
        println!("Creating wallet '{}' at {:?}", wallet_name, rtn);
        wallet::create_wallet(pool_name.unwrap_or("POOL1"),
                              wallet_name,
                              None,
                              None,
                              None)
            .or(Err(format!("Unable to create wallet '{}' at {:?}", wallet_name, rtn)))?;
    }

    Ok(rtn)
}

pub fn wallet_file_path(wallet_name: &str) -> Result<PathBuf, String> {
    Ok(home_dir().unwrap()
        .join(Path::new(".indy_client/wallet"))
        .join(Path::new(wallet_name))
        .join(Path::new("sqlite.db")))
}

fn open_wallet_db(wallet_name: Option<&str>, pool_name: Option<&str>) -> Result<Connection, String> {
    let db_file = match wallet_name {
        Some(name) => wallet_file(name, pool_name)?,
        None => _wallet_default_file()?
    };

//    println!("Opening wallet at {:?}", db_file);
    Connection::open(db_file.as_path())
        .or(Err("Unable to connect to the wallet".to_string()))
}

pub fn add_wallet_entry(wallet_name: Option<&str>, pool_name: Option<&str>, params: &[&ToSql]) -> Result<(), String> {
    let conn = open_wallet_db(wallet_name, pool_name)?;
    conn.execute("INSERT OR REPLACE INTO wallet VALUES (?,?,?)", params).map(|_|())
        .or(Err("Unable to add wallet entry".to_string()))
}

pub fn add_wallet_entry_str(wallet_name: Option<&str>, pool_name: Option<&str>, key: &str, value: &str, timestamp: &str, ) -> Result<(), String> {
    add_wallet_entry(wallet_name, pool_name, &[&key.to_string(), &value.to_string(), &timestamp.to_string()])
}

pub fn add_wallet_entries(wallet_name: Option<&str>, pool_name: Option<&str>, insert_val: &[[&str;3]]) -> Result<(), String> {
//    println!("Adding wallet entries");
    for entry in insert_val {
//        println!("Adding entry for {}", entry[0]);
        add_wallet_entry_str(wallet_name, pool_name, &entry[0], &entry[1], &entry[2])?;
    }
    Ok(())
}

#[cfg(test)]
mod tests {
    use super::*;
    use self::vcx::utils::libindy::wallet;

    static TEST_ENTRIES: &[[&str;3];1] = &[
        [
            "claim_definition::2hoqvcwupRTUNkXn6ArYzs:245",
            r#"{"ref":245,"origin":"2hoqvcwupRTUNkXn6ArYzs","signature_type":"CL","data":{"primary":{"n":"119640335039335366453233822895507163754683889700328223999156557673708607172698027699280960813212985249073670675732279421458505958643544780345176733390942688660561548423001402574483753726901109092136386622967359836222481993912061416412466168444236185649137082065114775669982564757854426554768762276285876392492558429106184461962950070500266439797835055432616473614566780803798975801686810972657029112007554508588810978304766573963595471778134989261201657600941164033896124192610818885288758761603855035413851049185066063203222657527846536741868183054513450662030395915668339691135774786178874194412406302974625572532917","s":"111116849337149022293671190642319630842853139518125773150539695991128033167557296443327950551190176922857410765546382756359642908205536650555945401831738114093048091974901069152144678298495046508699882840959402702534983140705402594332660988475097970823028299864278962893198645590125279991783948305434471317182643259637793161471478021064438367398816623140336326958846061054162614946156268707015103410000680076935480541868301638095726300248629324019516374795543271259732419417224536661658342818461490606497431965601038563676275715310718628648738420925561784817726598920385209652188419792968206967237881479445075910949305","rms":"92223392468533390616367854895107235412425940243721102726205661277150850450684839492296218371300721705554285852596084750688015366361342678440969601842967838704923530566507484807421378145962425126593515806971082800675063280669883392917520651583644511318896161300558668285926287257032952420461397471115331358594959312229972753348201658661808156483383864109553584892560087680377243034834546782930580083579320789867719130634607034201708333945901912123631209352875864948674908254476436842396635211530024202305261132732634104976442781393432203818520840424949608363710422595397938766695843019603426856230332471446056429818545","r":{"address2":"76312373271121947668110399690266566795183131583304057392065291905349986773435657090423744242227993335084216984532096349262373136375189784407592082458330369635683950238077611879636923883777107769350508450843081983726217883627600057363018944709734461834223040411993604170623889865449889578101910117417082910877521832336194943421907072825746458057648831500003630399716877675301236724311019761226125995152717445767414710016990491622554655167265347290397197163260767232657213425302990960157826608986683886778419354063687911859516535243130268722404224315886086786708141403407616584773967125609052276913728704864738791713434","address1":"112107150625101631826703687708406274307314518270527607461335411119789660514700828719659083332645461919372271480159789023941919034089876608612484572645660527258773512548708305737574047408678968014236668931679145453888179657210911855142501876038664886051185407835396345350554955667933765093860429180173637313207165558629938879415636381171929999700307082142560257860636672108691180525257306379167893862203950988380728161180281289455532436890069356698167615720925550154746717054905480498997222100113840071762099373338706416381214339519267819911167070398014543880547291049559899843536397376684503656985138829503113761847334","zip":"75409844042877068498396632963815597980143082823023583816086617473536312640361075538208556427599115930654082646503573934228924073625817230506843576654458862680958616083419987655123338937547078196942914377581546816740319900782463867549215322178602437109944801533323810316778610848265154322219435771163113307882398625551886954860138032937516220463972486108935953412956097353017767347443922913068909847992842870873812707855249215710020925091667815074986598203371408604275740861389360113214887634273802757366886987441728734523156671831530086489167991801453586941948191519756979780733181549451995965680166307152377514637673","state":"105101024796985112368321173171940378692674233461425521775191075607082699351959962518054766767979080519360051720967248068767412414194371995593743221701619019647713000420448942208027504765265939291116602643858717002527028531327915381487285817120810497713109906468528355257891189761713603500212957400060559039327864854296215316940153453880931271572688250683954887973236976716923594950111569541546323908831904926137541520423067936758420356669775877806761934939038495208208800088009237170336607711164355676461424840852827917878125343112448126593699118827651743522609739570170335339746260396460443334494874250396637745590405","city":"6302941047062303318125562891437855364457659527349582907020543755656196031055835601014063272137738458470101729412729089594225720902558263226491439398819729012536834362177050008876628369202483730148618706645990697085226604933921310251989393418869479442427154083761516709106719805918398782066343818045014245461458000631850324686261178670170803243790334135880578137368533084539625155181917360628816502270362692323031687857986211222593537024560564322439100503510324352710377013822366115217846768093825276396164175561040488993070522346962058026624436301049728102252176980992485290493942027533285929292305209367096037926118"},"rctxt":"91448184473296294810811234026346533280401570133085389950855681929916779259228347644324488541831275244128252156130186642145768118445339453570942873642599831288995432738565783146346446528408541608571162353712471137552610317388485396274913504907112692447099138328418860250980746562096535138212618213165033696645052839851943591700983993561096144678725272860233949918762845874837095971735621924328363769098667269692162462483917010336296436399675198498584836410378137482118545649465688833384729963076067366087521541014784557093037306548474403416354943738060880166068329246778852034035885863474966540007087220556298995213419","z":"107169873859743162389223575674887210984134988168263845181274158958952633660980042395908071681313811878821106033516424341068184787442597892677832613519498500694407357650090254368326543293794479681733854373983288892893474655541048633420532610388376518805445371822735262401204561052144787870128762474474890808484892463816255610060342848762753997704685012527224795795917581571874518539052835581763317426404183367693579239783645762137898115460191967550389443720944068455743724913778989135806630788640585885729600059570653581176082125797453086831115890474866421393873441449555841759182064135934656255467652552795381412554885"},"revocation":null}}"#,
            "2018-01-26 18:03:16"
        ]
    ];

    #[test]
    fn add_test(){
        let wallet_name = "wallet_test_9098";
        wallet::delete_wallet(wallet_name).unwrap_or(());
        add_wallet_entries(Some(wallet_name), None, TEST_ENTRIES).unwrap();
        wallet::delete_wallet(wallet_name).unwrap_or(());
    }
}
